package com.yungnickyoung.minecraft.betterfortresses.world;

import com.mojang.serialization.Codec;
import com.yungnickyoung.minecraft.betterfortresses.BetterFortresses;
import com.yungnickyoung.minecraft.betterfortresses.init.BFModProcessors;
import mcp.MethodsReturnNonnullByDefault;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.material.Material;
import net.minecraft.state.Property;
import net.minecraft.state.StateContainer;
import net.minecraft.state.StateHolder;
import net.minecraft.util.Direction;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IWorldReader;
import net.minecraft.world.gen.feature.template.IStructureProcessorType;
import net.minecraft.world.gen.feature.template.PlacementSettings;
import net.minecraft.world.gen.feature.template.StructureProcessor;
import net.minecraft.world.gen.feature.template.Template;
import net.minecraftforge.registries.ForgeRegistries;

import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Dynamically generates support pillars below bridges.
 */
@MethodsReturnNonnullByDefault
public class BridgeLegProcessor extends StructureProcessor {
    public static final BridgeLegProcessor INSTANCE = new BridgeLegProcessor();
    public static final Codec<BridgeLegProcessor> CODEC = Codec.unit(() -> INSTANCE);

    @ParametersAreNonnullByDefault
    @Override
    public Template.BlockInfo process(IWorldReader worldReader, BlockPos jigsawPiecePos, BlockPos jigsawPieceBottomCenterPos, Template.BlockInfo blockInfoLocal, Template.BlockInfo blockInfoGlobal, PlacementSettings structurePlacementData, @Nullable Template template) {
        if (blockInfoGlobal.state.getBlock() == Blocks.WHITE_STAINED_GLASS) {
            // Always replace the glass itself with nether bricks
            blockInfoGlobal = new Template.BlockInfo(blockInfoGlobal.pos, Blocks.NETHER_BRICKS.getDefaultState(), blockInfoGlobal.nbt);

            BlockPos.Mutable centerPos = blockInfoGlobal.pos.toMutable();
            centerPos.move(-2, -4, -2); // Offset to center

            generateTopPiece(worldReader, centerPos);
            centerPos.move(Direction.DOWN, 2);

            BlockState centerBlock = worldReader.getBlockState(centerPos);

            // Generate pillar down
            while (centerPos.getY() > 0 && (centerBlock.getMaterial() == Material.AIR || centerBlock.getMaterial() == Material.WATER || centerBlock.getMaterial() == Material.LAVA)) {
                generateMiddlePiece(worldReader, centerPos);
                centerPos.move(Direction.DOWN, 2); // Piece is two blocks tall
                centerBlock = worldReader.getBlockState(centerPos);
            }
        }

        return blockInfoGlobal;
    }

    protected IStructureProcessorType<?> getType() {
        return BFModProcessors.BRIDGE_LEG_PROCESSOR;
    }

    private void generateTopPiece(IWorldReader world, BlockPos pos) {
        // Create palette of BlockStates
        List<BlockState> palette = new ArrayList<>();
        Block block;
        BlockState blockState;
        StateContainer<Block, BlockState> stateContainer;
        Property<?> property;

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:chiseled_nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "none");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "none");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "none");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "none");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "outer_left");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "outer_right");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "outer_right");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "outer_left");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "none");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "none");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "none");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "none");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        BlockPos.Mutable mutable = new BlockPos.Mutable();

        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(9), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(9), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(10), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(11), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(12), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(13), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(14), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(14), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(15), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(16), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(15), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(16), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(17), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(17), false);

    }

    private void generateMiddlePiece(IWorldReader world, BlockPos pos) {
// Create palette of BlockStates
        List<BlockState> palette = new ArrayList<>();
        Block block;
        BlockState blockState;
        StateContainer<Block, BlockState> stateContainer;
        Property<?> property;

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "none");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "none");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "tall");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "none");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "none");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "tall");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "tall");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "tall");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "none");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "none");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "low");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "none");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_wall"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("east");
        if (property != null) blockState = setValueHelper(blockState, property, "east", "none");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("south");
        if (property != null) blockState = setValueHelper(blockState, property, "south", "low");
        property = stateContainer.getProperty("north");
        if (property != null) blockState = setValueHelper(blockState, property, "north", "low");
        property = stateContainer.getProperty("west");
        if (property != null) blockState = setValueHelper(blockState, property, "west", "low");
        property = stateContainer.getProperty("up");
        if (property != null) blockState = setValueHelper(blockState, property, "up", "true");
        palette.add(blockState);

        BlockPos.Mutable mutable = new BlockPos.Mutable();

        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(9), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(10), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(11), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(12), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(12), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(13), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(14), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(15), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(15), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(9), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(16), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(11), false);
    }


        /**
         * Constructs a single pillar top piece.
         * Generated via a python script.
         */
    private void generateTopPiece_old(IWorldReader world, BlockPos pos) {
        // Create palette of BlockStates
        List<BlockState> palette = new ArrayList<>();
        Block block;
        BlockState blockState;
        StateContainer<Block, BlockState> stateContainer;
        Property<?> property;

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_slab"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("type");
        if (property != null) blockState = setValueHelper(blockState, property, "type", "double");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:chiseled_nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        BlockPos.Mutable mutable = new BlockPos.Mutable();

        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 2, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 3, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
    }

    /**
     * Constructs a single pillar middle piece.
     * Generated via a python script.
     */
    private void generateMiddlePiece_old(IWorldReader world, BlockPos pos) {
        // Create palette of BlockStates
        List<BlockState> palette = new ArrayList<>();
        Block block;
        BlockState blockState;
        StateContainer<Block, BlockState> stateContainer;
        Property<?> property;

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_bricks"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "top");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "south");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "north");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "east");
        palette.add(blockState);

        block = ForgeRegistries.BLOCKS.getValue(new ResourceLocation("minecraft:nether_brick_stairs"));
        blockState = block.getDefaultState();
        stateContainer = block.getStateContainer();
        property = stateContainer.getProperty("half");
        if (property != null) blockState = setValueHelper(blockState, property, "half", "bottom");
        property = stateContainer.getProperty("waterlogged");
        if (property != null) blockState = setValueHelper(blockState, property, "waterlogged", "false");
        property = stateContainer.getProperty("shape");
        if (property != null) blockState = setValueHelper(blockState, property, "shape", "straight");
        property = stateContainer.getProperty("facing");
        if (property != null) blockState = setValueHelper(blockState, property, "facing", "west");
        palette.add(blockState);

        BlockPos.Mutable mutable = new BlockPos.Mutable();

        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 2, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 2);
        world.getChunk(mutable).setBlockState(mutable, palette.get(0), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX(), pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX() + 1, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(3), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 3, pos.getY(), pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(4), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(1), false);
        mutable.setPos(pos.getX() + 4, pos.getY(), pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(2), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX(), pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 1, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(7), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ());
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 3, pos.getY() + 1, pos.getZ() + 4);
        world.getChunk(mutable).setBlockState(mutable, palette.get(8), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 1);
        world.getChunk(mutable).setBlockState(mutable, palette.get(5), false);
        mutable.setPos(pos.getX() + 4, pos.getY() + 1, pos.getZ() + 3);
        world.getChunk(mutable).setBlockState(mutable, palette.get(6), false);
    }

    private static <S extends StateHolder<?, S>, T extends Comparable<T>> S setValueHelper(S blockState, Property<T> property, String name, String value) {
        Optional<T> optional = property.parseValue(value);
        if (optional.isPresent()) {
            return blockState.with(property, optional.get());
        } else {
            BetterFortresses.LOGGER.warn("Unable to read property: {} with value: {}", name, value);
            return blockState;
        }
    }
}
